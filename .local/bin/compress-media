#!/bin/bash

# Ensure ffmpeg and imagemagick are installed
if ! command -v ffmpeg &>/dev/null; then
  echo "Error: ffmpeg is not installed." >&2
  exit 1
fi

if ! command -v magick &>/dev/null; then
  echo "Error: ImageMagick is not installed." >&2
  exit 1
fi

if ! command -v exiftool &>/dev/null; then
  echo "Error: exiftool is not installed." >&2
  exit 1
fi

if [[ ! -d "$1" ]]; then
  echo "Error: $1 is not a directory"
  exit 1
fi

SCRIPT_NAME=$(basename "$0")

# Check for input directory
if [ -z "$1" ]; then
  echo "Usage: $SCRIPT_NAME [-g|--gpu] <directory>" >&2
  exit 1
fi

# Parse GPU option
USE_GPU=false
if [[ "$2" == "-g" || "$2" == "--gpu" ]]; then
  USE_GPU=true
  echo "GPU acceleration enabled for video compression."
fi

# Variables
INPUT_DIR="$1"
OUTPUT_DIR="$INPUT_DIR/compressed"

# Create output directory
echo "Creating output directory: $OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"

# Stats variables
video_count=0
image_count=0
skipped_count=0

# Function to preserve file permissions and ownership
preserve_permissions_and_ownership() {
  local input_file="$1"
  local output_file="$2"

  echo "Preserving permissions and ownership for: $output_file"
  chmod --reference="$input_file" "$output_file"
  chown --reference="$input_file" "$output_file"
}

# Function to compress videos
compress_video() {
  local input_file="$1"
  local output_file="$2"

  echo "Running ffmpeg on video: $input_file"
  if [ "$USE_GPU" = true ]; then
    prime-run ffmpeg -i "$input_file" -vcodec h264_nvenc -crf 28 -preset fast -acodec aac "$output_file" -y
    # prime-run ffmpeg -i "$input_file" -vcodec h264_nvenc -acodec aac "$output_file" -y
  else
    # ffmpeg -i "$input_file" -vcodec libx264 -acodec aac "$output_file" -y
    # ffmpeg -i "$input_file" "$output_file" -y
    ffmpeg -i "$input_file" -vcodec libx264 -crf 28 -preset fast -acodec aac "$output_file" -y
  fi

  echo "Copying metadata from $input_file to $output_file"
  exiftool -overwrite_original -TagsFromFile "$input_file" "$output_file"

  preserve_permissions_and_ownership "$input_file" "$output_file"

  echo "Video compression complete: $output_file"
  ((video_count++))
}

# Function to compress images
compress_image() {
  local input_file="$1"
  local output_file="$2"

  echo "Running ImageMagick on image: $input_file"
  magick "$input_file" -resize "1920x1080>" -quality 90 "$output_file"
  # magick "$input_file" -resize "2160x1440>" -quality 90 "$output_file"

  echo "Copying metadata from $input_file to $output_file"
  exiftool -overwrite_original -TagsFromFile "$input_file" "$output_file"

  preserve_permissions_and_ownership "$input_file" "$output_file"

  echo "Image compression and resizing complete: $output_file"
  ((image_count++))
}

# Compress media
echo "Finding media files in: $INPUT_DIR"
while IFS= read -r file; do
  echo "Processing file: $file"
  # Get relative path
  relative_path="${file#"$INPUT_DIR"/}"

  # Define output file path
  output_file="$OUTPUT_DIR/$relative_path"

  # Check if output file already exists, skip if it does
  if [ -e "$output_file" ]; then
    echo "Output file already exists: $output_file. Skipping..."
    ((skipped_count++))
    continue
  fi

  # Ensure directory structure exists
  echo "Ensuring directory structure for: $output_file"
  mkdir -p "$(dirname "$output_file")"

  if [[ "$file" =~ \.(mp4|MP4|mov|MOV)$ ]]; then
    echo "Compressing video: $file"
    compress_video "$file" "$output_file"
  elif [[ "$file" =~ \.(jpg|JPG|jpeg|JPEG|png|PNG)$ ]]; then
    echo "Compressing image: $file"
    compress_image "$file" "$output_file"
  else
    echo "Skipping unsupported file: $file"
    ((skipped_count++))
  fi

done < <(find "$INPUT_DIR" \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png' -o -iname '*.mp4' -o -iname '*.mov' \) ! -path "$OUTPUT_DIR/*" -print -maxdepth 1)

# Print stats
echo "Compression complete. Compressed files are saved in: $OUTPUT_DIR"

echo "Test"
echo "Summary:"
echo "  Videos compressed: $video_count"
echo "  Images compressed: $image_count"
echo "  Files skipped: $skipped_count"
