#!/bin/bash

# Check if the correct number of arguments is provided
if [ "$#" -ne 2 ]; then
  echo "Usage: $(basename "$0") <source_directory> <destination_directory>" >&2
  exit 1
fi

# Root directory to organize
ROOT_DIR=$(realpath "$1")

# Destination root for organized files
DEST_DIR=$(realpath "$2")

# Validate that ROOT_DIR exists
if [ ! -d "$ROOT_DIR" ]; then
  echo "Error: Source directory '$ROOT_DIR' does not exist." >&2
  exit 1
fi

# Validate that DEST_DIR is writable
if [ ! -w "$(dirname "$DEST_DIR")" ]; then
  echo "Error: Destination directory '$DEST_DIR' is not writable." >&2
  exit 1
fi

# Function to create a directory if it doesn't exist
create_dir_if_not_exists() {
  local dir=$1
  if [ ! -d "$dir" ]; then
    mkdir -p "$dir" || {
      echo "Error: Failed to create directory '$dir'." >&2
      exit 1
    }
  fi
}

# Function to determine the category based on file extension
get_category() {
  local file=$1
  local extension="${file##*.}"
  extension=$(echo "$extension" | tr '[:upper:]' '[:lower:]')

  case "$extension" in
  # Document file types
  txt | pdf | odp | docx | doc | xls | xlsx | ppt | pptx | odt | rtf | csv | json | xml) echo "Documents" ;;

  # Image file types
  jpg | jpeg | png | gif | bmp | tiff | webp | svg | ico | raw | heif) echo "Images" ;;

  # Video file types
  mp4 | avi | mkv | mov | wmv | flv | mpeg | mpg | webm | ts | 3gp | ogv) echo "Videos" ;;

  # Audio file types
  mp3 | wav | flac | aac | ogg | m4a | wma | opus | alac | aiFF) echo "Audio" ;;

  # Archive file types
  zip | rar | tar | gz | bz2 | 7z | xz | iso | dmg) echo "Archives" ;;

  # Code and markup file types
  html | css | js | cpp | py | java | go | php | rb | sh | pl | bat | sql) echo "Code" ;;

  # Executable file types
  exe | bin | run | app | jar | elf | com | msi) echo "Executables" ;;

  # Others
  *) echo "Others" ;;
  esac
}

# Function to calculate the checksum of a file
calculate_checksum() {
  local file=$1
  sha256sum "$file" | awk '{ print $1 }'
}

# Function to backup existing files if content matches
backup_existing_files() {
  local src_file=$1
  local dest_file=$2

  # Calculate checksums
  local src_checksum
  src_checksum=$(calculate_checksum "$src_file")
  local dest_checksum
  dest_checksum=$(calculate_checksum "$dest_file" 2>/dev/null || echo "")

  if [ "$src_checksum" = "$dest_checksum" ]; then
    echo "Backup: '$dest_file' matches '$src_file' (checksum: $src_checksum)"
    return 0
  else
    echo "Backup: '$dest_file' does not match '$src_file' or does not exist."
    return 1
  fi
}

# To Cateogrize by date
# Get file's modification date (Year-Month)
# FILE_DATE=$(date -r "$file" +"%Y-%m")
# YEAR_MONTH_DIR="$CATEGORY_DIR/$FILE_DATE"
# create_dir_if_not_exists "$YEAR_MONTH_DIR"

# Function to organize files
organize_files() {
  find "$ROOT_DIR" -type f -print0 | while IFS= read -r -d '' file; do
    # Determine the category
    category=$(get_category "$file")

    # Create the category directory
    CATEGORY_DIR="$DEST_DIR/$category"
    create_dir_if_not_exists "$CATEGORY_DIR"

    # Prepare destination path
    DEST=${file#"$ROOT_DIR/"}
    DEST="$CATEGORY_DIR/$DEST"
    DEST_DIR_NAME="$(dirname "$DEST")"
    create_dir_if_not_exists "$DEST_DIR_NAME"

    # Backup existing files if content matches
    if [ -f "$DEST" ]; then
      if backup_existing_files "$file" "$DEST"; then
        continue
      fi
    fi

    # Log copying action
    echo "Copying '$file' to '$DEST_DIR_NAME/'"

    # Copy the file and log any errors
    if [ -r "$file" ] && [ -w "$DEST_DIR_NAME" ]; then
      cp "$file" "$DEST_DIR_NAME/" 2>>/dev/stderr
    else
      echo "Warning: File '$file' cannot be read or destination '$DEST_DIR_NAME' cannot be written to." >&2
    fi
  done
}

# Organize all files
organize_files

# Remove empty directories
find "$ROOT_DIR" -type d -empty -delete

echo "Files have been organized into $DEST_DIR."
